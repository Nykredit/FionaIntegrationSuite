{"version":3,"file":"index.js","sources":["../template/index.js"],"sourcesContent":["import { File, Text } from '@asyncapi/generator-react-sdk';\r\n\r\n/**\r\n * Converts AsyncAPI schema types to C# types.\r\n */\r\nfunction mapType(schema) {\r\n    if (!schema || typeof schema.type !== 'function') {\r\n        return 'object';\r\n    }\r\n\r\n    switch (schema.type()) {\r\n        case 'string':\r\n            if (schema.format() === 'date-time') return 'DateTime';\r\n            return 'string';\r\n        case 'integer':\r\n            return 'int';\r\n        case 'number':\r\n            return 'double';\r\n        case 'boolean':\r\n            return 'bool';\r\n        case 'array':\r\n            return `List<${mapType(schema.items())}>`;\r\n        case 'object':\r\n            return ToPascalCase(schema._json?.['x-parser-schema-id'] || 'Object');\r\n        default:\r\n            return 'object';\r\n    }\r\n}\r\n\r\n/**\r\n * Resolves a $ref to its actual schema from the components map.\r\n */\r\nfunction resolveRef(ref, schemas) {\r\n    const refName = ref.split('/').pop();\r\n    return schemas[refName];\r\n}\r\n\r\n/**\r\n * Flattens an allOf schema into a single schema with merged properties and required fields.\r\n */\r\nfunction normalizeSchema(schema, schemas, baseProperties) {\r\n    const raw = schema._json;\r\n\r\n    if (!raw?.allOf) return schema;\r\n\r\n    const merged = { properties: {}, required: [] };\r\n\r\n    raw.allOf.forEach(part => {\r\n        let resolved = part;\r\n        if (part.$ref) {\r\n            resolved = resolveRef(part.$ref, schemas)?._json;\r\n        }\r\n\r\n        if (resolved?.properties) {\r\n            merged.properties = { ...merged.properties, ...resolved.properties };\r\n        }\r\n\r\n        if (resolved?.required) {\r\n            merged.required.push(...resolved.required);\r\n        }\r\n    });\r\n\r\n\r\n\r\n    return {\r\n        ...schema,\r\n        properties: () => merged.properties,\r\n        required: merged.required,\r\n    };\r\n}\r\n\r\nfunction ToPascalCase(str) {\r\n    return str?.replace(/(^\\w|_\\w)/g, m => m.replace('_', '').toUpperCase()) || '';\r\n}\r\n\r\n/**\r\n * Generates an immutable C# positional record.\r\n */\r\nfunction Record({ name, schema, schemas, baseClass, baseProperties, asyncapi, template }) {\r\n\r\n    if (!schema) return null;\r\n\r\n    const normSchema = normalizeSchema(schema, schemas, baseProperties);\r\n\r\n    if (!normSchema.properties || typeof normSchema.properties !== 'function') {\r\n        console.warn(`Schema for ${name} has no properties:`, normSchema);\r\n        return null;\r\n    }\r\n\r\n    var baseClassElements = [];\r\n\r\n    var props = [];\r\n\r\n    if (baseProperties) {\r\n\r\n        const baseProps = Object.entries(baseProperties)\r\n            .map(([propName, propSchema]) => {\r\n                const type = mapType(propSchema);\r\n                var paramName = ToPascalCase(propName);\r\n                if (propName == \"eventType\") paramName = \"\\\"\" + name + \"\\\"\"\r\n                else if (propName == \"version\") paramName = \"\\\"\" + asyncapi.info().version() + \"\\\"\"\r\n\r\n                var parameterElement = `${type} ${paramName}`;\r\n\r\n\r\n                baseClassElements.push(paramName);\r\n                if ([\"eventType\", \"version\"].indexOf(propName) == -1) {\r\n                    props.push(parameterElement);\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    Object.entries(normSchema.properties())\r\n        .map(([propName, propSchema]) => {\r\n            const type = mapType(propSchema);\r\n            const paramName = ToPascalCase(propName);\r\n            var parameterElement = `${type} ${paramName}`;\r\n\r\n\r\n            props.push(parameterElement);\r\n        });\r\n\r\n\r\n\r\n    props = props.join(\", \");\r\n\r\n    baseClassElements = baseClassElements.join(', ');\r\n\r\n    const inheritance = baseClass ? ` : ${baseClass}(${baseClassElements})` : '';\r\n\r\n    template = template || \"\"\r\n\r\n    if (!inheritance) {\r\n        return (\r\n            <Text>\r\n                {`public record ${name}(${props})${inheritance}`}\r\n                {`\\n{\\n`}\r\n                {`public virtual string Template => string.Empty;`}\r\n                {`\\n}`}\r\n            </Text>\r\n        )\r\n    } else {\r\n        return (\r\n            <Text>\r\n                {`public record ${name}(${props})${inheritance}`}\r\n                {`\\n{\\n`}\r\n                {`public override string Template => @\"${template}\";`}\r\n                {`\\n}`}\r\n\r\n            </Text>\r\n        );\r\n    }\r\n}\r\n\r\nexport default function ({ asyncapi }) {\r\n    const messages = asyncapi.components().messages();\r\n    const schemas = asyncapi.components().schemas();\r\n    const files = [];\r\n\r\n\r\n    const schemasReferenced = [];\r\n\r\n    Object.entries(messages).forEach(([msgName, msg]) => {\r\n        const schema = msg.payload();\r\n        const schemaName = ToPascalCase(msgName);\r\n        let baseName = null;\r\n        let baseProperties = [];\r\n        const mergedTraitProperties = {};\r\n\r\n        let template = null;\r\n\r\n        if (msg._json[\"x-message-template\"]) {\r\n            template = `${msg._json[\"x-message-template\"]}`\r\n        }\r\n\r\n\r\n\r\n        // Check if there are traits\r\n        const traits = msg.traits?.();\r\n        if (traits && Object.keys(traits).length > 0) {\r\n\r\n            // Merge all trait schemas into one schema\r\n\r\n            const mergedRequired = [];\r\n\r\n            Object.values(traits).forEach(trait => {\r\n                baseName = ToPascalCase(`${trait.name()}Base`);\r\n\r\n                const traitSchema = trait.headers?.();\r\n                if (traitSchema?.properties) {\r\n                    Object.entries(traitSchema.properties()).forEach(([propName, propSchema]) => {\r\n                        baseProperties.push(propName);\r\n                        mergedTraitProperties[propName] = propSchema;\r\n                    });\r\n                }\r\n            });\r\n\r\n            const traitSchema = {\r\n                properties: () => mergedTraitProperties,\r\n                required: mergedRequired,\r\n            };\r\n\r\n            files.push(\r\n                <File name={`${baseName}.cs`} key={`trait-${msgName}`}>\r\n                    {`namespace DataTransformationHub.Events.Models;\\n`}\r\n                    <Record name={baseName} schema={traitSchema} schemas={schemas} asyncapi={asyncapi} />\r\n                </File>\r\n            );\r\n        }\r\n\r\n        // Analyze payload schema for referenced schemas\r\n        if (schema?.properties) {\r\n            Object.entries(schema.properties()).forEach(([_, s]) => {\r\n                if (s.type() === \"array\") {\r\n                    schemasReferenced.push(s.items()._json?.['x-parser-schema-id']);\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n\r\n        files.push(\r\n            <File name={`${schemaName}.cs`} key={`msg-${msgName}`}>\r\n                {`namespace DataTransformationHub.Events.Models;\\n`}\r\n                <Record name={schemaName} schema={schema} schemas={schemas} baseClass={baseName} baseProperties={mergedTraitProperties} asyncapi={asyncapi} template={template} />\r\n            </File>\r\n        );\r\n    });\r\n\r\n    // Generate records for referenced schemas\r\n    Object.entries(schemas).forEach(([schemaName, schema]) => {\r\n        if (!schemasReferenced.includes(schemaName)) return;\r\n        if (schema.type() !== 'object' && !schema._json?.allOf) return;\r\n        const pascalName = ToPascalCase(schemaName);\r\n\r\n        files.push(\r\n            <File name={`${pascalName}.cs`} key={`schema-${schemaName}`}>\r\n                {`namespace DataTransformationHub.Events.Models;\\n`}\r\n                <Record name={pascalName} schema={schema} schemas={schemas} />\r\n            </File>\r\n        );\r\n    });\r\n\r\n    return files;\r\n}\r\n"],"names":["mapType","schema","_schema$_json","type","format","items","ToPascalCase","_json","resolveRef","ref","schemas","refName","split","pop","normalizeSchema","baseProperties","raw","allOf","merged","properties","required","forEach","part","_resolved","_resolved2","resolved","$ref","_resolveRef","push","str","replace","m","toUpperCase","Record","name","baseClass","asyncapi","template","normSchema","console","warn","baseClassElements","props","Object","entries","map","propName","propSchema","paramName","info","version","parameterElement","indexOf","join","inheritance","_jsxs","Text","children","messages","components","files","schemasReferenced","msgName","msg","_msg$traits","payload","schemaName","baseName","mergedTraitProperties","traits","call","keys","length","mergedRequired","values","trait","_trait$headers","traitSchema","headers","File","_jsx","_","s","_s$items$_json","_schema$_json2","includes","pascalName"],"mappings":"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"}